# BOJ 4779번: 칸토어 집합 
# URL: https://www.acmicpc.net/problem/4779
# 분류: 분할 정복, 재귀 
# 난이도: 실버 3
# 풀이 시간: 20분

# ✅ 문제 설명 요약:
# 칸토어 집합은 0과 1사이의 실수로 이루어진 집합으로, 구간 [0, 1]에서 시작해서 각 구간을 3등분하여 가운데 구간을 반복적으로 제외하는 방식으로 만든다.
# 전체 집합이 유한이라고 가정, 다음과 같은 과정을 통해 칸토어 집합의 근사를 만듬
# 1. -가 3^N개 있는 문자열에서 시작
# 2. 문자열을 3등분 한 뒤, 가운데 문자열을 공백으로 바꿈. 이렇게 하면 선(문자열) 2개가 남는다.
# 3. 이제 각 선(문자열)을 3등분 하고, 가운데 문자열을 공백으로 바꿈. 이 과정은 모든 선의 길이가 1일 때까지 계속함
# 모든 선의 길이가 1이면 멈춘다. N이 주어졌을 때, 마지막 과정이 끝난 후 결과 출력 

# ✅ 내 풀이 아이디어:
# - 칸토어 집합을 만드는 cantor 함수를 작성한다.
# - n이 0일 경우 -하나이므로 return '-'을 한다.
# - 아닐 경우 왼쪽, 가운데, 오른쪽으로 나눠 왼쪽/오른쪽은 cantor(n-1)을 재귀호출하고, 가운데는 3^(n-1)만큼 공백을 생성한다.
# - 그 후 왼쪽+가운데+오른쪽 문자열을 return 한다.
# - EOFError 전까지 반복하며 n을 입력받고, cantor함수를 호출해 출력한다.

def cantor(s, n):
  if n == 0:
    return "-"
  else:
    left = cantor(s, n-1)
    center = " " * (3 ** (n-1))
    right = cantor(s, n-1)
    return left + center + right
  
while True:
  try:
    n = int(input())
    print(cantor("-", n))
  except EOFError:
    break