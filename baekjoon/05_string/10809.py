# BOJ 10809번: 알파벳 찾기 
# URL: https://www.acmicpc.net/problem/10809
# 분류: 구현, 문자열
# 난이도: 브론즈 2
# 풀이 시간: 2분

# 문제 설명 요약:
# 알파벳 소문자로만 이루어진 단어 s의 각각 알파벳에 대해,
# 단어가 포함되어 있는 경우에는 처음 등장하는 위치, 아닌 경우 -1 출력

# 내 풀이 아이디어:
# - 알파벳 개수인 26 길이의 배열 생성해 -1로 초기화 
# - input()으로 문자열 입력받음
# - enumerate()로 인덱스, 값 순차적으로 가져옴 
# - 값을 ord()로 아스키 변환 후 시작 기준이 0인 인덱스스값으로 변환
# - 얻은 인덱스값을 통해 알파벳 배열에 접근
# - -1인 경우 해당 알파벳이 아직 등장하지 않은 경우이므로 등장 위치 기록

alp = [-1] * 26
s = input()

for index, char in enumerate(s):
  pos = ord(char) - 97
  if alp[pos] == -1:
    alp[pos] = index

print(*alp)