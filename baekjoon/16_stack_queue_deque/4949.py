# BOJ 4949번: 균형잡힌 세상 
# URL: https://www.acmicpc.net/problem/4949
# 분류: 자료 구조, 문자열, 스택 
# 난이도: 실버 4
# 풀이 시간: 10분

# ✅ 문제 설명 요약:
# 문자열에 포함되는 괄호는 ()(소괄호)와 [](대괄호)로 두 종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.
# - 모든 '('는 ')'와만 짝을 이뤄야 한다.
# - 모든 '['는 ']'와만 짝을 이뤄야 한다.
# - 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
# - 모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
# - 짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.
# 문자열이 주어졌을 때, 균형잡힌 문자열인지 아닌지를 판단 

# ✅ 내 풀이 아이디어:
# - 반복하며 문자열을 입력받고 '.'이 들어오면 종료한다.
# - stack을 생성하고 균형이 맞는지 저장하는 bal 변수를 yes로 초기화
# - 문자열의 문자를 검사하며 (나 [이면 스택에 추가
# - )일 때, 스택에 아무것도 없거나 스택의 맨 위가 (가 아니라면 bal을 no로 설정하고 반복문 종료
# - ]일 때도 스택이 비었거나 스택 맨 위 괄호짝이 맞지 않는 경우 bal=no하고 반복문 종료
# - 하지만 ), ]를 만났을 때 스택 맨 위 괄호 짝이 맞을 경우 pop()하여 스택 맨 위 문자 제거
# - 문자열 검사 종료 후 스택이 비지 않았으면 짝이 맞지 않는 것이므로0 val=no
# - 최종 저장된 bal(균형 맞는지 여부) 출력 

while True:
  s = input()
  if s == '.':
    break

  stack = []
  bal = 'yes'

  for i in s:
    if i in '([':
      stack.append(i)
    elif i == ')':
      if not stack or stack[-1] != '(':
        bal = 'no'
        break
      else:
        stack.pop()
    elif i == ']':
      if not stack or stack[-1] != '[':
        bal = 'no'
        break
      else:
        stack.pop()
    
  if len(stack) != 0:
    bal = 'no'

  print(bal)